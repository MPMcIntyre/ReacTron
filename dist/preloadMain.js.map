{"version":3,"sources":["webpack://custom-electron-boilerplate/./node_modules/define-lazy-prop/index.js","webpack://custom-electron-boilerplate/./node_modules/is-docker/index.js","webpack://custom-electron-boilerplate/./node_modules/is-wsl/index.js","webpack://custom-electron-boilerplate/./node_modules/open/index.js","webpack://custom-electron-boilerplate/./src/main/preloads/core.preload.ts","webpack://custom-electron-boilerplate/external \"child_process\"","webpack://custom-electron-boilerplate/external \"electron\"","webpack://custom-electron-boilerplate/external \"fs\"","webpack://custom-electron-boilerplate/external \"os\"","webpack://custom-electron-boilerplate/external \"path\"","webpack://custom-electron-boilerplate/webpack/bootstrap","webpack://custom-electron-boilerplate/webpack/runtime/compat get default export","webpack://custom-electron-boilerplate/webpack/runtime/define property getters","webpack://custom-electron-boilerplate/webpack/runtime/hasOwnProperty shorthand","webpack://custom-electron-boilerplate/./src/main/preloads/main.preload.ts"],"names":["module","exports","object","propertyName","fn","define","value","Object","defineProperty","enumerable","writable","configurable","result","fs","isDocker","undefined","statSync","_","hasDockerEnv","readFileSync","includes","hasDockerCGroup","os","isWsl","process","platform","release","toLowerCase","env","__IS_WSL_TEST__","path","childProcess","promises","constants","fsConstants","defineLazyProperty","localXdgOpenPath","join","__dirname","arch","getWslDrivesMountPoint","defaultMountPoint","mountPoint","async","configFilePath","isConfigFileExists","access","F_OK","configContent","readFile","encoding","configMountPoint","exec","groups","trim","endsWith","pTryEach","array","mapper","latestError","item","error","open","target","options","TypeError","wait","background","newInstance","allowNonzeroExitCode","Array","isArray","app","singleApp","command","name","arguments","appArguments","appName","cliArguments","childProcessOptions","push","SYSTEMROOT","windowsVerbatimArguments","encodedArguments","unshift","length","map","arg","Buffer","from","toString","isBundled","exeLocalXdgOpen","X_OK","versions","electron","stdio","detached","subprocess","spawn","Promise","resolve","reject","once","exitCode","Error","unref","detectArchBinary","binary","archBinary","detectPlatformBinary","platformBinary","wsl","apps","darwin","win32","linux","ia32","x64","exposeInMainWorld","isDev","DEV","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","n","getter","__esModule","d","a","definition","key","o","get","obj","prop","prototype","hasOwnProperty","call","contextBridge","openExternal","link"],"mappings":"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","file":"preloadMain.js","sourcesContent":["'use strict';\nmodule.exports = (object, propertyName, fn) => {\n\tconst define = value => Object.defineProperty(object, propertyName, {value, enumerable: true, writable: true});\n\n\tObject.defineProperty(object, propertyName, {\n\t\tconfigurable: true,\n\t\tenumerable: true,\n\t\tget() {\n\t\t\tconst result = fn();\n\t\t\tdefine(result);\n\t\t\treturn result;\n\t\t},\n\t\tset(value) {\n\t\t\tdefine(value);\n\t\t}\n\t});\n\n\treturn object;\n};\n","'use strict';\nconst fs = require('fs');\n\nlet isDocker;\n\nfunction hasDockerEnv() {\n\ttry {\n\t\tfs.statSync('/.dockerenv');\n\t\treturn true;\n\t} catch (_) {\n\t\treturn false;\n\t}\n}\n\nfunction hasDockerCGroup() {\n\ttry {\n\t\treturn fs.readFileSync('/proc/self/cgroup', 'utf8').includes('docker');\n\t} catch (_) {\n\t\treturn false;\n\t}\n}\n\nmodule.exports = () => {\n\tif (isDocker === undefined) {\n\t\tisDocker = hasDockerEnv() || hasDockerCGroup();\n\t}\n\n\treturn isDocker;\n};\n","'use strict';\nconst os = require('os');\nconst fs = require('fs');\nconst isDocker = require('is-docker');\n\nconst isWsl = () => {\n\tif (process.platform !== 'linux') {\n\t\treturn false;\n\t}\n\n\tif (os.release().toLowerCase().includes('microsoft')) {\n\t\tif (isDocker()) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\ttry {\n\t\treturn fs.readFileSync('/proc/version', 'utf8').toLowerCase().includes('microsoft') ?\n\t\t\t!isDocker() : false;\n\t} catch (_) {\n\t\treturn false;\n\t}\n};\n\nif (process.env.__IS_WSL_TEST__) {\n\tmodule.exports = isWsl;\n} else {\n\tmodule.exports = isWsl();\n}\n","const path = require('path');\nconst childProcess = require('child_process');\nconst {promises: fs, constants: fsConstants} = require('fs');\nconst isWsl = require('is-wsl');\nconst isDocker = require('is-docker');\nconst defineLazyProperty = require('define-lazy-prop');\n\n// Path to included `xdg-open`.\nconst localXdgOpenPath = path.join(__dirname, 'xdg-open');\n\nconst {platform, arch} = process;\n\n/**\nGet the mount point for fixed drives in WSL.\n\n@inner\n@returns {string} The mount point.\n*/\nconst getWslDrivesMountPoint = (() => {\n\t// Default value for \"root\" param\n\t// according to https://docs.microsoft.com/en-us/windows/wsl/wsl-config\n\tconst defaultMountPoint = '/mnt/';\n\n\tlet mountPoint;\n\n\treturn async function () {\n\t\tif (mountPoint) {\n\t\t\t// Return memoized mount point value\n\t\t\treturn mountPoint;\n\t\t}\n\n\t\tconst configFilePath = '/etc/wsl.conf';\n\n\t\tlet isConfigFileExists = false;\n\t\ttry {\n\t\t\tawait fs.access(configFilePath, fsConstants.F_OK);\n\t\t\tisConfigFileExists = true;\n\t\t} catch {}\n\n\t\tif (!isConfigFileExists) {\n\t\t\treturn defaultMountPoint;\n\t\t}\n\n\t\tconst configContent = await fs.readFile(configFilePath, {encoding: 'utf8'});\n\t\tconst configMountPoint = /(?<!#.*)root\\s*=\\s*(?<mountPoint>.*)/g.exec(configContent);\n\n\t\tif (!configMountPoint) {\n\t\t\treturn defaultMountPoint;\n\t\t}\n\n\t\tmountPoint = configMountPoint.groups.mountPoint.trim();\n\t\tmountPoint = mountPoint.endsWith('/') ? mountPoint : `${mountPoint}/`;\n\n\t\treturn mountPoint;\n\t};\n})();\n\nconst pTryEach = async (array, mapper) => {\n\tlet latestError;\n\n\tfor (const item of array) {\n\t\ttry {\n\t\t\treturn await mapper(item); // eslint-disable-line no-await-in-loop\n\t\t} catch (error) {\n\t\t\tlatestError = error;\n\t\t}\n\t}\n\n\tthrow latestError;\n};\n\nconst open = async (target, options) => {\n\tif (typeof target !== 'string') {\n\t\tthrow new TypeError('Expected a `target`');\n\t}\n\n\toptions = {\n\t\twait: false,\n\t\tbackground: false,\n\t\tnewInstance: false,\n\t\tallowNonzeroExitCode: false,\n\t\t...options\n\t};\n\n\tif (Array.isArray(options.app)) {\n\t\treturn pTryEach(options.app, singleApp => open(target, {\n\t\t\t...options,\n\t\t\tapp: singleApp\n\t\t}));\n\t}\n\n\tlet {name: app, arguments: appArguments = []} = options.app || {};\n\tappArguments = [...appArguments];\n\n\tif (Array.isArray(app)) {\n\t\treturn pTryEach(app, appName => open(target, {\n\t\t\t...options,\n\t\t\tapp: {\n\t\t\t\tname: appName,\n\t\t\t\targuments: appArguments\n\t\t\t}\n\t\t}));\n\t}\n\n\tlet command;\n\tconst cliArguments = [];\n\tconst childProcessOptions = {};\n\n\tif (platform === 'darwin') {\n\t\tcommand = 'open';\n\n\t\tif (options.wait) {\n\t\t\tcliArguments.push('--wait-apps');\n\t\t}\n\n\t\tif (options.background) {\n\t\t\tcliArguments.push('--background');\n\t\t}\n\n\t\tif (options.newInstance) {\n\t\t\tcliArguments.push('--new');\n\t\t}\n\n\t\tif (app) {\n\t\t\tcliArguments.push('-a', app);\n\t\t}\n\t} else if (platform === 'win32' || (isWsl && !isDocker())) {\n\t\tconst mountPoint = await getWslDrivesMountPoint();\n\n\t\tcommand = isWsl ?\n\t\t\t`${mountPoint}c/Windows/System32/WindowsPowerShell/v1.0/powershell.exe` :\n\t\t\t`${process.env.SYSTEMROOT}\\\\System32\\\\WindowsPowerShell\\\\v1.0\\\\powershell`;\n\n\t\tcliArguments.push(\n\t\t\t'-NoProfile',\n\t\t\t'-NonInteractive',\n\t\t\t'–ExecutionPolicy',\n\t\t\t'Bypass',\n\t\t\t'-EncodedCommand'\n\t\t);\n\n\t\tif (!isWsl) {\n\t\t\tchildProcessOptions.windowsVerbatimArguments = true;\n\t\t}\n\n\t\tconst encodedArguments = ['Start'];\n\n\t\tif (options.wait) {\n\t\t\tencodedArguments.push('-Wait');\n\t\t}\n\n\t\tif (app) {\n\t\t\t// Double quote with double quotes to ensure the inner quotes are passed through.\n\t\t\t// Inner quotes are delimited for PowerShell interpretation with backticks.\n\t\t\tencodedArguments.push(`\"\\`\"${app}\\`\"\"`, '-ArgumentList');\n\t\t\tappArguments.unshift(target);\n\t\t} else {\n\t\t\tencodedArguments.push(`\"${target}\"`);\n\t\t}\n\n\t\tif (appArguments.length > 0) {\n\t\t\tappArguments = appArguments.map(arg => `\"\\`\"${arg}\\`\"\"`);\n\t\t\tencodedArguments.push(appArguments.join(','));\n\t\t}\n\n\t\t// Using Base64-encoded command, accepted by PowerShell, to allow special characters.\n\t\ttarget = Buffer.from(encodedArguments.join(' '), 'utf16le').toString('base64');\n\t} else {\n\t\tif (app) {\n\t\t\tcommand = app;\n\t\t} else {\n\t\t\t// When bundled by Webpack, there's no actual package file path and no local `xdg-open`.\n\t\t\tconst isBundled = !__dirname || __dirname === '/';\n\n\t\t\t// Check if local `xdg-open` exists and is executable.\n\t\t\tlet exeLocalXdgOpen = false;\n\t\t\ttry {\n\t\t\t\tawait fs.access(localXdgOpenPath, fsConstants.X_OK);\n\t\t\t\texeLocalXdgOpen = true;\n\t\t\t} catch {}\n\n\t\t\tconst useSystemXdgOpen = process.versions.electron ||\n\t\t\t\tplatform === 'android' || isBundled || !exeLocalXdgOpen;\n\t\t\tcommand = useSystemXdgOpen ? 'xdg-open' : localXdgOpenPath;\n\t\t}\n\n\t\tif (appArguments.length > 0) {\n\t\t\tcliArguments.push(...appArguments);\n\t\t}\n\n\t\tif (!options.wait) {\n\t\t\t// `xdg-open` will block the process unless stdio is ignored\n\t\t\t// and it's detached from the parent even if it's unref'd.\n\t\t\tchildProcessOptions.stdio = 'ignore';\n\t\t\tchildProcessOptions.detached = true;\n\t\t}\n\t}\n\n\tcliArguments.push(target);\n\n\tif (platform === 'darwin' && appArguments.length > 0) {\n\t\tcliArguments.push('--args', ...appArguments);\n\t}\n\n\tconst subprocess = childProcess.spawn(command, cliArguments, childProcessOptions);\n\n\tif (options.wait) {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tsubprocess.once('error', reject);\n\n\t\t\tsubprocess.once('close', exitCode => {\n\t\t\t\tif (options.allowNonzeroExitCode && exitCode > 0) {\n\t\t\t\t\treject(new Error(`Exited with code ${exitCode}`));\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tresolve(subprocess);\n\t\t\t});\n\t\t});\n\t}\n\n\tsubprocess.unref();\n\n\treturn subprocess;\n};\n\nfunction detectArchBinary(binary) {\n\tif (typeof binary === 'string' || Array.isArray(binary)) {\n\t\treturn binary;\n\t}\n\n\tconst {[arch]: archBinary} = binary;\n\n\tif (!archBinary) {\n\t\tthrow new Error(`${arch} is not supported`);\n\t}\n\n\treturn archBinary;\n}\n\nfunction detectPlatformBinary({[platform]: platformBinary}, {wsl}) {\n\tif (wsl && isWsl) {\n\t\treturn detectArchBinary(wsl);\n\t}\n\n\tif (!platformBinary) {\n\t\tthrow new Error(`${platform} is not supported`);\n\t}\n\n\treturn detectArchBinary(platformBinary);\n}\n\nconst apps = {};\n\ndefineLazyProperty(apps, 'chrome', () => detectPlatformBinary({\n\tdarwin: 'google chrome',\n\twin32: 'chrome',\n\tlinux: ['google-chrome', 'google-chrome-stable']\n}, {\n\twsl: {\n\t\tia32: '/mnt/c/Program Files (x86)/Google/Chrome/Application/chrome.exe',\n\t\tx64: ['/mnt/c/Program Files/Google/Chrome/Application/chrome.exe', '/mnt/c/Program Files (x86)/Google/Chrome/Application/chrome.exe']\n\t}\n}));\n\ndefineLazyProperty(apps, 'firefox', () => detectPlatformBinary({\n\tdarwin: 'firefox',\n\twin32: 'C:\\\\Program Files\\\\Mozilla Firefox\\\\firefox.exe',\n\tlinux: 'firefox'\n}, {\n\twsl: '/mnt/c/Program Files/Mozilla Firefox/firefox.exe'\n}));\n\ndefineLazyProperty(apps, 'edge', () => detectPlatformBinary({\n\tdarwin: 'microsoft edge',\n\twin32: 'msedge',\n\tlinux: 'microsoft-edge'\n}, {\n\twsl: '/mnt/c/Program Files (x86)/Microsoft/Edge/Application/msedge.exe'\n}));\n\nopen.apps = apps;\n\nmodule.exports = open;\n","\"use strict\";\r\nvar contextBridge = require(\"electron\").contextBridge;\r\nvar isDev = function () {\r\n    return process.env.DEV;\r\n};\r\ncontextBridge.exposeInMainWorld(\"GlobalApi\", {\r\n    isDev: isDev(),\r\n});\r\n","module.exports = require(\"child_process\");;","module.exports = require(\"electron\");;","module.exports = require(\"fs\");;","module.exports = require(\"os\");;","module.exports = require(\"path\");;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","import \"./core.preload.ts\";\r\nvar contextBridge = require(\"electron\").contextBridge;\r\nvar open = require(\"open\");\r\n// opens the url in the default browser\r\nvar openExternal = function (link) {\r\n    //   open(link);\r\n    return open(link);\r\n};\r\ncontextBridge.exposeInMainWorld(\"mainApi\", {\r\n    openExternal: openExternal,\r\n});\r\n"],"sourceRoot":""}